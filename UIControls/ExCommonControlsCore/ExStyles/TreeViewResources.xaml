<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:ExCommonControlsCore.ExControls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/ExCommonControlsCore;component/Themes/ThemeColorNew.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <FontFamily x:Key="FontFamily">pack://application:,,,/UIContrExCommonControlsCoreolsCore;component/Assets/Fonts/#iconfont</FontFamily>

    <ControlTemplate x:Key="ArrowButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Grid Background="Transparent" Name="back">
            <TextBlock Text="&#xe637;" FontFamily="{StaticResource FontFamily}" FontSize="14"
                       VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0" 
                       RenderTransformOrigin="0.5,0.5" Name="arrow" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="RenderTransform" TargetName="arrow">
                    <Setter.Value>
                        <RotateTransform Angle="90"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource IndexForegroundColor}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid Background="Transparent" Name="root">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MinHeight="36"/>
                            <RowDefinition  />
                        </Grid.RowDefinitions>
                        <Grid.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenViewCommand}"/>
                        </Grid.InputBindings>

                        <Border Name="bd" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="0" Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True" UseLayoutRounding="True">
                            <Grid Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="50"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Path Name="path" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                 Fill="{TemplateBinding Foreground}"  Stroke="{TemplateBinding Foreground}" 
                                                      Data="{Binding MenuIcon}"
                                                     Stretch="Uniform"/>
                                <Grid Grid.Column="1">
                                    <TextBlock Name="txt" Text="{Binding Header}" Visibility="Visible"
                                                     Foreground="{TemplateBinding Foreground}" Margin="5,0,10,0" 
                                                    HorizontalAlignment="Left" VerticalAlignment="Center">
                                    </TextBlock>
                                </Grid>
                            </Grid>
                        </Border>
                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press" Foreground="{Binding ElementName=txt,Path=Foreground}"
                                      Visibility="Visible"
                                      IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{StaticResource ArrowButtonTemplate}"/>


                        <ItemsPresenter x:Name="ItemsHost" Margin="5,0,0,0" Grid.ColumnSpan="2" Grid.Row="1" Visibility="Visible"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:ExMenuContainer,Mode=FindAncestor},Path=Width}" Value="50">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background"  Value="{StaticResource MenuMousePressedBackgroundColor}"/>
                            <Setter Property="Foreground"  Value="{StaticResource IndexSelectedForegroundColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"  Value="{StaticResource MenuMouseOverBackgroundColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource MenuMousePressedBackgroundColor}"/>
                            <Setter Property="Foreground"  Value="{StaticResource IndexSelectedForegroundColor}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>